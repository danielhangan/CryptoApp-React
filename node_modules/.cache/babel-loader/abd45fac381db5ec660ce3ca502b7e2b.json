{"ast":null,"code":"import React from'react';import HTMLReactParser from'html-react-parser';import{Table,Typography,Avatar}from'antd';import millify from'millify';import{useGetCryptoExchangesQuery}from'../services/cryptoApi';import Loader from'./Loader';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Title=Typography.Title,Text=Typography.Text;var Exchanges=function Exchanges(){var _data$data;var _useGetCryptoExchange=useGetCryptoExchangesQuery(),data=_useGetCryptoExchange.data,isFetching=_useGetCryptoExchange.isFetching;var exchangesData=data===null||data===void 0?void 0:(_data$data=data.data)===null||_data$data===void 0?void 0:_data$data.exchanges;if(isFetching)return/*#__PURE__*/_jsx(Loader,{});console.log(exchangesData);var columns=[{title:'Exchanges',dataIndex:['name','iconUrl'],render:function render(text,record){return/*#__PURE__*/_jsxs(Text,{strong:true,children:[record.rank,\".\",/*#__PURE__*/_jsx(Avatar,{className:\"exchange-image\",src:record.iconUrl}),record.name]});}},{title:'24h Trade Volume',dataIndex:'volume',defaultSortOrder:'descend',sorter:function sorter(a,b){return a.volume-b.volume;},render:function render(text){return\"$\".concat(millify(text));}},{title:'Markets',dataIndex:'numberOfMarkets',defaultSortOrder:'descend',sorter:function sorter(a,b){return a.numberOfMarkets-b.numberOfMarkets;},render:function render(markets){return millify(markets);}},{title:'Change',dataIndex:'marketShare',defaultSortOrder:'descend',sorter:function sorter(a,b){return a.marketShare-b.marketShare;},render:function render(share){return\"\".concat(millify(share),\"%\");}}];return/*#__PURE__*/_jsx(Table,{rowKey:\"id\",columns:columns,expandable:{expandedRowRender:function expandedRowRender(record){return/*#__PURE__*/_jsx(\"p\",{style:{margin:0},children:HTMLReactParser(record.description)});}},dataSource:exchangesData});};export default Exchanges;","map":{"version":3,"sources":["/home/scooch/Dev/projects/cryptoapp/src/components/Exchanges.jsx"],"names":["React","HTMLReactParser","Table","Typography","Avatar","millify","useGetCryptoExchangesQuery","Loader","Title","Text","Exchanges","data","isFetching","exchangesData","exchanges","console","log","columns","title","dataIndex","render","text","record","rank","iconUrl","name","defaultSortOrder","sorter","a","b","volume","numberOfMarkets","markets","marketShare","share","expandedRowRender","margin","description"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,OAASC,KAAT,CAAgBC,UAAhB,CAA4BC,MAA5B,KAA0C,MAA1C,CACA,MAAOC,CAAAA,OAAP,KAAoB,SAApB,CACA,OAASC,0BAAT,KAA2C,uBAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,C,wFAEA,GAAQC,CAAAA,KAAR,CAAwBL,UAAxB,CAAQK,KAAR,CAAeC,IAAf,CAAwBN,UAAxB,CAAeM,IAAf,CAGA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,gBACpB,0BAA6BJ,0BAA0B,EAAvD,CAAQK,IAAR,uBAAQA,IAAR,CAAcC,UAAd,uBAAcA,UAAd,CACA,GAAMC,CAAAA,aAAa,CAAGF,IAAH,SAAGA,IAAH,6BAAGA,IAAI,CAAEA,IAAT,qCAAG,WAAYG,SAAlC,CAEA,GAAIF,UAAJ,CAAgB,mBAAO,KAAC,MAAD,IAAP,CAGhBG,OAAO,CAACC,GAAR,CAAYH,aAAZ,EAEA,GAAMI,CAAAA,OAAO,CAAG,CACZ,CACIC,KAAK,CAAE,WADX,CAEIC,SAAS,CAAE,CAAC,MAAD,CAAS,SAAT,CAFf,CAGIC,MAAM,CAAE,gBAACC,IAAD,CAAOC,MAAP,qBAAkB,MAAC,IAAD,EAAM,MAAM,KAAZ,WAAcA,MAAM,CAACC,IAArB,kBAA2B,KAAC,MAAD,EAAQ,SAAS,CAAC,gBAAlB,CAAmC,GAAG,CAAED,MAAM,CAACE,OAA/C,EAA3B,CAAsFF,MAAM,CAACG,IAA7F,GAAlB,EAHZ,CADY,CAMZ,CACIP,KAAK,CAAE,kBADX,CAEIC,SAAS,CAAE,QAFf,CAGIO,gBAAgB,CAAE,SAHtB,CAIIC,MAAM,CAAE,gBAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACE,MAAF,CAAWD,CAAC,CAACC,MAAvB,EAJZ,CAKIV,MAAM,CAAE,gBAAAC,IAAI,mBAAQhB,OAAO,CAACgB,IAAD,CAAf,GALhB,CANY,CAYZ,CACIH,KAAK,CAAE,SADX,CAEIC,SAAS,CAAE,iBAFf,CAGIO,gBAAgB,CAAE,SAHtB,CAIIC,MAAM,CAAE,gBAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACG,eAAF,CAAoBF,CAAC,CAACE,eAAhC,EAJZ,CAKIX,MAAM,CAAE,gBAAAY,OAAO,QAAI3B,CAAAA,OAAO,CAAC2B,OAAD,CAAX,EALnB,CAZY,CAkBZ,CACId,KAAK,CAAE,QADX,CAEIC,SAAS,CAAE,aAFf,CAGIO,gBAAgB,CAAE,SAHtB,CAIIC,MAAM,CAAE,gBAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAACK,WAAF,CAAgBJ,CAAC,CAACI,WAA5B,EAJZ,CAKIb,MAAM,CAAE,gBAAAc,KAAK,kBAAO7B,OAAO,CAAC6B,KAAD,CAAd,OALjB,CAlBY,CAAhB,CA4BA,mBACI,KAAC,KAAD,EACI,MAAM,CAAC,IADX,CAEI,OAAO,CAAEjB,OAFb,CAGI,UAAU,CAAE,CACRkB,iBAAiB,CAAE,2BAAAb,MAAM,qBAAI,UAAG,KAAK,CAAE,CAAEc,MAAM,CAAE,CAAV,CAAV,UAA0BnC,eAAe,CAACqB,MAAM,CAACe,WAAR,CAAzC,EAAJ,EADjB,CAHhB,CAMI,UAAU,CAAExB,aANhB,EADJ,CASH,CA9CD,CAgDA,cAAeH,CAAAA,SAAf","sourcesContent":["import React from 'react';\nimport HTMLReactParser from 'html-react-parser';\nimport { Table, Typography, Avatar } from 'antd';\nimport millify from 'millify';\nimport { useGetCryptoExchangesQuery } from '../services/cryptoApi';\nimport Loader from './Loader';\n\nconst { Title, Text } = Typography;\n\n\nconst Exchanges = () => {\n    const { data, isFetching } = useGetCryptoExchangesQuery();\n    const exchangesData = data?.data?.exchanges\n\n    if (isFetching) return <Loader />\n\n\n    console.log(exchangesData)\n\n    const columns = [\n        {\n            title: 'Exchanges',\n            dataIndex: ['name', 'iconUrl'],\n            render: (text, record) => <Text strong>{record.rank}.<Avatar className=\"exchange-image\" src={record.iconUrl} />{record.name}</Text>\n        },\n        { \n            title: '24h Trade Volume', \n            dataIndex: 'volume',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.volume - b.volume,\n            render: text => `$${millify(text)}` },\n        { \n            title: 'Markets', \n            dataIndex: 'numberOfMarkets',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.numberOfMarkets - b.numberOfMarkets,\n            render: markets => millify(markets)},\n        { \n            title: 'Change', \n            dataIndex: 'marketShare',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.marketShare - b.marketShare,\n            render: share => `${millify(share)}%`\n        }\n    ];\n\n\n    return (\n        <Table \n            rowKey='id'\n            columns={columns}\n            expandable={{\n                expandedRowRender: record => <p style={{ margin: 0 }}>{HTMLReactParser(record.description)}</p>\n              }}\n            dataSource={exchangesData} />\n    )\n}\n\nexport default Exchanges;\n"]},"metadata":{},"sourceType":"module"}