{"ast":null,"code":"var _jsxFileName = \"/home/scooch/Dev/projects/cryptoapp/src/components/Cryptodetails.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport HTMLReactParser from 'html-react-parser';\nimport { useParams } from 'react-router';\nimport millify from 'millify';\nimport { Col, Row, Typography, Select } from 'antd';\nimport { MoneyCollectOutlined, DollarCircleOutlined, FundOutlined, ExclamationCircleOutlined, StopOutlined, TrophyOutlined, CheckOutlined, NumberOutlined, ThunderboltOutlined } from '@ant-design/icons';\nimport { useGetCryptoDetailsQuery } from '../services/cryptoApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Title,\n  Text\n} = Typography;\nconst {\n  Option\n} = Select;\n\nconst Cryptodetails = () => {\n  _s();\n\n  var _data$data;\n\n  const {\n    coinId\n  } = useParams();\n  const {\n    timePeriod,\n    setTimePeriod\n  } = useState('7d');\n  const {\n    data,\n    isFetching\n  } = useGetCryptoDetailsQuery(coinId);\n  console.log(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.coin); // const cryptoDetails = data?.data?.coin;\n  // const time = ['3h', '24h', '7d', '30d', '1y', '3m', '3y', '5y'];\n  // const stats = [\n  //     { title: 'Price to USD', value: `$ ${cryptoDetails.price && millify(cryptoDetails.price)}`, icon: <DollarCircleOutlined /> },\n  //     { title: 'Rank', value: cryptoDetails.rank, icon: <NumberOutlined /> },\n  //     { title: '24h Volume', value: `$ ${cryptoDetails.volume && millify(cryptoDetails.volume)}`, icon: <ThunderboltOutlined /> },\n  //     { title: 'Market Cap', value: `$ ${cryptoDetails.marketCap && millify(cryptoDetails.marketCap)}`, icon: <DollarCircleOutlined /> },\n  //     { title: 'All-time-high(daily avg.)', value: `$ ${millify(cryptoDetails.allTimeHigh.price)}`, icon: <TrophyOutlined /> },\n  // ];\n  // const genericStats = [\n  //     { title: 'Number Of Markets', value: cryptoDetails.numberOfMarkets, icon: <FundOutlined /> },\n  //     { title: 'Number Of Exchanges', value: cryptoDetails.numberOfExchanges, icon: <MoneyCollectOutlined /> },\n  //     { title: 'Aprroved Supply', value: cryptoDetails.approvedSupply ? <CheckOutlined /> : <StopOutlined />, icon: <ExclamationCircleOutlined /> },\n  //     { title: 'Total Supply', value: `$ ${millify(cryptoDetails.totalSupply)}`, icon: <ExclamationCircleOutlined /> },\n  //     { title: 'Circulating Supply', value: `$ ${millify(cryptoDetails.circulatingSupply)}`, icon: <ExclamationCircleOutlined /> },\n  // ];\n\n  return /*#__PURE__*/_jsxDEV(Col, {\n    className: \"coin-detail-container\",\n    children: /*#__PURE__*/_jsxDEV(Col, {\n      className: \"coin-heading-contaienr\",\n      children: /*#__PURE__*/_jsxDEV(Title, {\n        level: 2,\n        className: \"coin-name\",\n        children: \"hey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Cryptodetails, \"lU1iagjHISYgpU3qiWRaL9k98sI=\", false, function () {\n  return [useParams, useGetCryptoDetailsQuery];\n});\n\n_c = Cryptodetails;\nexport default Cryptodetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cryptodetails\");","map":{"version":3,"sources":["/home/scooch/Dev/projects/cryptoapp/src/components/Cryptodetails.jsx"],"names":["React","useState","HTMLReactParser","useParams","millify","Col","Row","Typography","Select","MoneyCollectOutlined","DollarCircleOutlined","FundOutlined","ExclamationCircleOutlined","StopOutlined","TrophyOutlined","CheckOutlined","NumberOutlined","ThunderboltOutlined","useGetCryptoDetailsQuery","Title","Text","Option","Cryptodetails","coinId","timePeriod","setTimePeriod","data","isFetching","console","log","coin"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,UAAnB,EAA+BC,MAA/B,QAA6C,MAA7C;AACA,SAASC,oBAAT,EAA+BC,oBAA/B,EAAqDC,YAArD,EAAmEC,yBAAnE,EAA8FC,YAA9F,EAA4GC,cAA5G,EAA4HC,aAA5H,EAA2IC,cAA3I,EAA2JC,mBAA3J,QAAsL,mBAAtL;AAEA,SAASC,wBAAT,QAAyC,uBAAzC;;AAEA,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAkBb,UAAxB;AACA,MAAM;AAAEc,EAAAA;AAAF,IAAab,MAAnB;;AAGA,MAAMc,aAAa,GAAG,MAAM;AAAA;;AAAA;;AACxB,QAAM;AAAEC,IAAAA;AAAF,MAAapB,SAAS,EAA5B;AACA,QAAM;AAAEqB,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAgCxB,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM;AAAEyB,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAuBT,wBAAwB,CAACK,MAAD,CAArD;AACAK,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,aAAYA,IAAZ,qCAAYA,IAAI,CAAEA,IAAlB,+CAAY,WAAYI,IAAxB,EAJwB,CAKxB;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI,QAAC,GAAD;AAAK,IAAA,SAAS,EAAC,uBAAf;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA,6BACI,QAAC,KAAD;AAAO,QAAA,KAAK,EAAE,CAAd;AAAiB,QAAA,SAAS,EAAC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH,CAtCD;;GAAMR,a;UACiBnB,S,EAEUe,wB;;;KAH3BI,a;AAwCN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport HTMLReactParser from 'html-react-parser';\nimport { useParams } from 'react-router';\nimport millify from 'millify';\nimport { Col, Row, Typography, Select } from 'antd';\nimport { MoneyCollectOutlined, DollarCircleOutlined, FundOutlined, ExclamationCircleOutlined, StopOutlined, TrophyOutlined, CheckOutlined, NumberOutlined, ThunderboltOutlined } from '@ant-design/icons';\n\nimport { useGetCryptoDetailsQuery } from '../services/cryptoApi';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\n\nconst Cryptodetails = () => {\n    const { coinId } = useParams();\n    const { timePeriod, setTimePeriod } = useState('7d');\n    const { data, isFetching } = useGetCryptoDetailsQuery(coinId);\n    console.log(data?.data?.coin)\n    // const cryptoDetails = data?.data?.coin;\n    \n    // const time = ['3h', '24h', '7d', '30d', '1y', '3m', '3y', '5y'];\n\n    // const stats = [\n    //     { title: 'Price to USD', value: `$ ${cryptoDetails.price && millify(cryptoDetails.price)}`, icon: <DollarCircleOutlined /> },\n    //     { title: 'Rank', value: cryptoDetails.rank, icon: <NumberOutlined /> },\n    //     { title: '24h Volume', value: `$ ${cryptoDetails.volume && millify(cryptoDetails.volume)}`, icon: <ThunderboltOutlined /> },\n    //     { title: 'Market Cap', value: `$ ${cryptoDetails.marketCap && millify(cryptoDetails.marketCap)}`, icon: <DollarCircleOutlined /> },\n    //     { title: 'All-time-high(daily avg.)', value: `$ ${millify(cryptoDetails.allTimeHigh.price)}`, icon: <TrophyOutlined /> },\n    // ];\n\n    // const genericStats = [\n    //     { title: 'Number Of Markets', value: cryptoDetails.numberOfMarkets, icon: <FundOutlined /> },\n    //     { title: 'Number Of Exchanges', value: cryptoDetails.numberOfExchanges, icon: <MoneyCollectOutlined /> },\n    //     { title: 'Aprroved Supply', value: cryptoDetails.approvedSupply ? <CheckOutlined /> : <StopOutlined />, icon: <ExclamationCircleOutlined /> },\n    //     { title: 'Total Supply', value: `$ ${millify(cryptoDetails.totalSupply)}`, icon: <ExclamationCircleOutlined /> },\n    //     { title: 'Circulating Supply', value: `$ ${millify(cryptoDetails.circulatingSupply)}`, icon: <ExclamationCircleOutlined /> },\n    // ];\n\n    return (\n        <Col className=\"coin-detail-container\">\n            <Col className=\"coin-heading-contaienr\">\n                <Title level={2} className=\"coin-name\">\n                    hey\n                    {/* {cryptoDetails.name}  */}\n                    {/* ({cryptoDetails.slug}) Price */}\n\n                </Title>\n            </Col>\n        \n        </Col>\n    )\n}\n\nexport default Cryptodetails;\n"]},"metadata":{},"sourceType":"module"}