{"version":3,"sources":["images/cryptocurrency.png","components/Navbar.jsx","services/cryptoApi.js","components/Homepage.jsx","components/LineChart.jsx","components/Loader.jsx","components/Cryptodetails.jsx","components/Cryptocurrencies.jsx","services/cryptoNewsApi.js","components/News.jsx","components/Exchanges.jsx","App.js","app/store.js","index.js"],"names":["Navbar","useState","activeMenu","setActiveMenu","screenSize","setScreenSize","useEffect","handleResize","window","innerWidth","addEventListener","removeEventListener","className","src","icon","size","Title","level","to","onClick","MenuOutlined","theme","Item","HomeOutlined","FundOutlined","MoneyCollectOutlined","BulbOutlined","cryptoApiHeaders","createRequest","url","headers","cryptoApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","endpoints","builder","getCryptos","query","count","getCryptoDetails","coinId","getCryptoHistory","timePeriod","getCryptoExchanges","useGetCryptosQuery","useGetCryptoDetailsQuery","useGetCryptoHistoryQuery","useGetCryptoExchangesQuery","Typography","Homepage","data","isFetching","globalStats","stats","span","title","value","total","millify","totalExchanges","totalMarketCap","total24hVolume","totalMarkets","simplified","LineChart","coinHistory","currentPrice","coinName","coinPrice","coinTimestamp","i","history","length","push","price","Date","timestamp","toLocaleDateString","labels","datasets","label","fill","backgroundcolor","borderColor","change","option","scales","yAxes","ticks","beginAtZero","Loader","Text","Option","Select","Cryptodetails","useParams","setTimePeriod","cryptoDetails","coin","DollarCircleOutlined","rank","NumberOutlined","volume","ThunderboltOutlined","marketCap","allTimeHigh","TrophyOutlined","genericStats","numberOfMarkets","numberOfExchanges","approvedSupply","CheckOutlined","StopOutlined","ExclamationCircleOutlined","totalSupply","circulatingSupply","name","slug","defaultValue","placeholder","onChange","map","date","HTMLReactParser","description","links","link","type","href","target","rel","Cryptocurrencies","cryptosList","cryptos","setCryptos","searchTerm","setSearchTerm","filteredData","coins","filter","toLowerCase","includes","e","gutter","currency","xs","sm","lg","id","extra","iconUrl","hoverable","cryptoNewsHeaders","cryptoNewsApi","getCryptoNews","newsCategory","useGetCryptoNewsQuery","demoImage","News","setNewsCategory","cryptoNews","showSearch","optionFilterProp","filterOption","input","children","indexOf","news","style","maxWidth","maxHeight","image","thumbnail","contentUrl","alt","substring","provider","moment","datePublished","startOf","fromNow","Exchanges","exchangesData","exchanges","console","log","columns","dataIndex","render","text","record","strong","defaultSortOrder","sorter","a","b","markets","marketShare","share","rowKey","expandable","expandedRowRender","margin","dataSource","App","exact","path","color","textAlign","configureStore","reducer","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.4e098c3d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cryptocurrency.1548aced.png\";","import React, { useState, useEffect } from 'react'\nimport { Button, Menu, Typography, Avatar } from 'antd';\nimport { Link } from 'react-router-dom';\nimport { HomeOutlined, MoneyCollectOutlined, BulbOutlined, FundOutlined, MenuOutlined } from '@ant-design/icons';\n\nimport icon from '../images/cryptocurrency.png'\nconst Navbar = () => {\n    const [activeMenu, setActiveMenu] = useState(true);\n    const [screenSize, setScreenSize] = useState(null);\n    useEffect(() => {\n        const handleResize = () => setScreenSize(window.innerWidth);\n\n        window.addEventListener('resize', handleResize);\n\n        handleResize();\n\n        return () => window.removeEventListener('resize', handleResize); \n    }, [])\n\n    useEffect(() => {\n        if (setScreenSize < 768) {\n            setActiveMenu(false)\n        } else {\n            setActiveMenu(true);\n        }\n    }, [screenSize])\n\n    return (\n        <div className=\"nav-container\">\n            <div className=\"logo-container\">\n                <Avatar src={icon} size=\"large\" />\n                <Typography.Title level={2} className=\"logo\">\n                    <Link to=\"/\">Crypto App</Link>\n                </Typography.Title>\n            </div>\n            <Button className=\"menu-control-container\" onClick={() => setActiveMenu(!activeMenu)}>\n                <MenuOutlined />\n            </Button>\n\n            {activeMenu && (\n                <Menu theme=\"dark\">\n                    <Menu.Item icon={<HomeOutlined />}>\n                        <Link to=\"/\">Home</Link>\n                    </Menu.Item>\n                    <Menu.Item icon={<FundOutlined />}>\n                        <Link to=\"/cryptocurrencies\">Cryptocurrencies</Link>\n                    </Menu.Item>\n                    <Menu.Item icon={<MoneyCollectOutlined />}>\n                        <Link to=\"/exchanges\">Exchanges</Link>\n                    </Menu.Item>\n                    <Menu.Item icon={<BulbOutlined />}>\n                        <Link to=\"/news\">News</Link>\n                    </Menu.Item>\n                </Menu>\n            )}\n        </div>\n    )\n}\n\nexport default Navbar;\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst cryptoApiHeaders = {\n      'x-rapidapi-host': 'coinranking1.p.rapidapi.com',\n      'x-rapidapi-key': 'f2886fbfcamsh28008c0e5f20068p1bd8c9jsn57cb2e3b1439'\n}\n\nconst baseUrl = 'https://coinranking1.p.rapidapi.com';\n\nconst createRequest = (url) => ({ url, headers: cryptoApiHeaders })\n\nexport const cryptoApi = createApi({\n    reducerPath: 'cryptoApi',\n    baseQuery: fetchBaseQuery({  baseUrl }),\n    endpoints: (builder) => ({\n        getCryptos: builder.query({\n            query: (count) => createRequest(`/coins?limit=${count}`),\n        }),\n        getCryptoDetails: builder.query({\n            query: (coinId) => createRequest(`/coin/${coinId}`),\n        }),\n        getCryptoHistory: builder.query({\n            query: ({ coinId, timePeriod }) => createRequest(`/coin/${coinId}/history/${timePeriod}`),\n        }),\n        getCryptoExchanges: builder.query({\n            query: () => createRequest(`/exchanges`),\n        })\n    })\n});\n\nexport const { useGetCryptosQuery, useGetCryptoDetailsQuery, useGetCryptoHistoryQuery, useGetCryptoExchangesQuery } = cryptoApi;","import React from 'react';\nimport millify from 'millify';\nimport { Typography, Row, Col, Statistic } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport { useGetCryptosQuery } from '../services/cryptoApi';\nimport { Cryptocurrencies, News, Loader } from '../components';\n\n\nconst { Title } = Typography;\n\nconst Homepage = () => {\n    const { data, isFetching } = useGetCryptosQuery(10);\n    const globalStats  = data?.data?.stats;\n\n    if(isFetching) return <Loader />;\n    return (\n        <>\n            <Title level={2} className=\"heading\">Global Crypto Stats</Title>\n            <Row>\n                <Col span={12}><Statistic title=\"Total Cryptocurrencies\" value={globalStats.total}></Statistic></Col>\n                <Col span={12}><Statistic title=\"Total Exchanges\" value={millify(globalStats.totalExchanges)}></Statistic></Col>\n                <Col span={12}><Statistic title=\"Total Martket Cap\" value={millify(globalStats.totalMarketCap)}></Statistic></Col>\n                <Col span={12}><Statistic title=\"Total 24h Volume\" value={millify(globalStats.total24hVolume)}></Statistic></Col>\n                <Col span={12}><Statistic title=\"Total Total Markets\" value={millify(globalStats.totalMarkets)}></Statistic></Col>\n            </Row>\n            <div className='home-heading-container'>\n                <Title level={2} className='home-title'>Top 10 Cryptocurrencies in the world</Title>\n                <Title level={2} className='show-more'><Link to='/cryptocurrencies'>Show More</Link></Title>\n            </div>\n            <Cryptocurrencies simplified />\n            <div className='home-heading-container'>\n                <Title level={2} className='home-title'>Latest Crypto News</Title>\n                <Title level={2} className='show-more'><Link to='/news'>Show More</Link></Title>\n            </div>\n            <News simplified />\n        </>\n    )\n}\n\nexport default Homepage;","import React from 'react'\nimport { Line } from 'react-chartjs-2';\nimport { Col, Row, Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst LineChart = ({ coinHistory, currentPrice, coinName }) => {\n    const coinPrice = [];\n    const coinTimestamp = [];\n\n    for (let i = 0; i < coinHistory?.data?.history?.length; i++) {\n        coinPrice.push(coinHistory.data.history[i].price)\n        coinTimestamp.push(new Date(coinHistory.data.history[i].timestamp).toLocaleDateString());\n    }\n\n    const data = {\n        labels: coinTimestamp,\n        datasets: [\n            {\n                label: \"Price in USD\",\n                data: coinPrice,\n                fill: false,\n                backgroundcolor: '#0071bd',\n                borderColor: '#0071bd'\n            }\n        ]\n    }\n\n    const options = {\n        scales: {\n            yAxes: [\n                {\n                    ticks: {\n                        beginAtZero: true\n                    }\n                }\n            ]\n        }\n    }\n\n\n    return (\n        <div>\n            <Row className=\"chart-header\">\n                <Title level={2} className=\"chart-title\">{coinName} Price Chart</Title>\n                <Col className=\"price-container\">\n                    <Title level={5} className=\"price-change\">{coinHistory?.data?.change}%</Title>\n                    <Title level={5} className=\"current-price\">Current {coinName} Price: $ {currentPrice}</Title>    \n                </Col>\n            </Row>\n            <Line data={data} option={options} />\n        </div>\n    )\n}\n\nexport default LineChart;\n","import React from 'react';\nimport { Spin } from 'antd';\n\nconst Loader = () => {\n    return (\n        <div className=\"loader\">\n            <Spin />\n        </div>\n    )\n}\n\nexport default Loader\n","import React, { useState } from 'react'\nimport HTMLReactParser from 'html-react-parser';\nimport { useParams } from 'react-router';\nimport millify from 'millify';\nimport { Col, Row, Typography, Select } from 'antd';\nimport { MoneyCollectOutlined, DollarCircleOutlined, FundOutlined, ExclamationCircleOutlined, StopOutlined, TrophyOutlined, CheckOutlined, NumberOutlined, ThunderboltOutlined } from '@ant-design/icons';\n\nimport { useGetCryptoDetailsQuery, useGetCryptoHistoryQuery } from '../services/cryptoApi';\nimport LineChart from './LineChart';\n\nimport Loader from './Loader';\n\nconst { Title, Text } = Typography;\nconst { Option } = Select;\n\n\nconst Cryptodetails = () => {\n    const { coinId } = useParams();\n    const [timePeriod, setTimePeriod] = useState('7d');\n    const { data, isFetching } = useGetCryptoDetailsQuery(coinId);\n    const { data: coinHistory } = useGetCryptoHistoryQuery({ coinId, timePeriod });\n    const cryptoDetails = data?.data?.coin;\n\n    if(isFetching) return <Loader />\n    \n    const time = ['3h', '24h', '7d', '30d', '1y', '3m', '3y', '5y'];\n\n    const stats = [\n        { title: 'Price to USD', value: `$ ${cryptoDetails.price && millify(cryptoDetails.price)}`, icon: <DollarCircleOutlined /> },\n        { title: 'Rank', value: cryptoDetails.rank, icon: <NumberOutlined /> },\n        { title: '24h Volume', value: `$ ${cryptoDetails.volume && millify(cryptoDetails.volume)}`, icon: <ThunderboltOutlined /> },\n        { title: 'Market Cap', value: `$ ${cryptoDetails.marketCap && millify(cryptoDetails.marketCap)}`, icon: <DollarCircleOutlined /> },\n        { title: 'All-time-high(daily avg.)', value: `$ ${millify(cryptoDetails.allTimeHigh.price)}`, icon: <TrophyOutlined /> },\n    ];\n\n    const genericStats = [\n        { title: 'Number Of Markets', value: cryptoDetails.numberOfMarkets, icon: <FundOutlined /> },\n        { title: 'Number Of Exchanges', value: cryptoDetails.numberOfExchanges, icon: <MoneyCollectOutlined /> },\n        { title: 'Aprroved Supply', value: cryptoDetails.approvedSupply ? <CheckOutlined /> : <StopOutlined />, icon: <ExclamationCircleOutlined /> },\n        { title: 'Total Supply', value: `$ ${millify(cryptoDetails.totalSupply)}`, icon: <ExclamationCircleOutlined /> },\n        { title: 'Circulating Supply', value: `$ ${millify(cryptoDetails.circulatingSupply)}`, icon: <ExclamationCircleOutlined /> },\n    ];\n\n\n    return (\n        <Col className=\"coin-detail-container\">\n            <Col className=\"coin-heading-contaienr\">\n                <Title level={2} className=\"coin-name\">\n                    {cryptoDetails.name} ({cryptoDetails.slug}) Price\n                </Title>\n                <p>\n                    {cryptoDetails.name} live price in US dollars.\n                    View value statistics, market cap and supply.\n                </p>\n            </Col>\n            <Select \n                defaultValue=\"7d\" \n                className=\"select-timeperiod\" \n                placeholder=\"Select Time Period\" \n                onChange={(value) => setTimePeriod(value)}\n            >\n                {time.map((date) => <Option key={date}>{date}</Option>)}\n            </Select>\n            <LineChart coinHistory={coinHistory} currentPrice={millify(cryptoDetails.price)} coinName={cryptoDetails.name}/>\n            <Col className=\"stats-container\">\n                <Col className=\"coin-value-statistics\">\n                    <Col className=\"coin-value-statistics-heading\">\n                        <Title level={3} className=\"coin-details-heading\">\n                            {cryptoDetails.name} Value Statistics\n                        </Title>\n                        <p>\n                            An overview showing the stats of {cryptoDetails.name}\n                        </p>\n                    </Col>\n                    {stats.map(({ icon, title, value}) => (\n                        <Col className=\"coin-stats\">\n                            <Col className=\"coin-stats-name\">\n                                <Text>{icon}</Text>\n                                <Text>{title}</Text>\n                            </Col>\n                            <Text className=\"stats\">{value}</Text>\n                        </Col>\n                    ))}\n                </Col>\n\n                <Col className=\"other-stats-info\">\n                    <Col className=\"coin-value-statistics-heading\">\n                        <Title level={3} className=\"coin-details-heading\">\n                            Other Statistics\n                        </Title>\n                        <p>\n                            An overview showing the stats of all cryptocurrencies\n                        </p>\n                    </Col>\n                    {genericStats.map(({ icon, title, value}) => (\n                        <Col className=\"coin-stats\">\n                            <Col className=\"coin-stats-name\">\n                                <Text>{icon}</Text>\n                                <Text>{title}</Text>\n                            </Col>\n                            <Text className=\"stats\">{value}</Text>\n                        </Col>\n                    ))}\n                </Col>\n            </Col>\n\n            <Col className=\"coin-desc-link\">\n                <Row className=\"coin-desc\">\n                    <Title level={3} className=\"coin-details-heading\">\n                        What is {cryptoDetails.name}\n                        {HTMLReactParser(cryptoDetails.description)}\n                    </Title>\n                </Row>\n                <Col className=\"coin-links\">\n                    <Title level={3} className=\"coin-details-heading\">\n                        {cryptoDetails.name} Links\n                    </Title>\n                    {cryptoDetails.links.map((link) => (\n                        <Row className=\"coin-link\" key={link.name}>\n                            <Title level={5} className=\"link-name\">\n                                {link.type}\n                            </Title>\n                            <a href={link.url} target=\"_blank\" rel=\"noreferrer\">\n                                {link.name}\n                            </a>\n                        </Row>\n                    ))}\n                </Col>\n            </Col>\n\n        </Col>\n    )\n}\n\nexport default Cryptodetails;\n","import React, { useState, useEffect } from 'react'\nimport millify from 'millify'\nimport { Link } from 'react-router-dom'\nimport { Card, Row, Col, Input } from 'antd'\n\nimport { useGetCryptosQuery } from '../services/cryptoApi';\n\nimport Loader from './Loader';\n\nconst Cryptocurrencies = ({ simplified }) => {\n    const count = simplified ? 10 : 100\n    const { data: cryptosList, isFetching } = useGetCryptosQuery(count);\n    const [cryptos, setCryptos] = useState([]);\n    const [searchTerm, setSearchTerm] = useState('');\n\n    useEffect(() => {\n        const filteredData = cryptosList?.data?.coins.filter((coin) => coin.name.toLowerCase().includes(searchTerm.toLowerCase()));\n\n        setCryptos(filteredData)\n    }, [cryptosList, searchTerm])\n\n     if(isFetching) return <Loader />\n\n    return (\n        <>\n        {!simplified && (\n            <div className='search-crypto'>\n                <Input placeholder=\"Search Cryptocurrency\"onChange={(e) => setSearchTerm(e.target.value)}/>\n            </div>\n        )}\n            <Row gutter={[32, 32]} className='crypto-card-container'>\n                {cryptos?.map((currency) => (\n                    <Col xs={24} sm={12} lg={6} className='crypto-card' key={currency.id}>\n                        <Link to={`/crypto/${currency.id}`}>\n                            <Card \n                                title={`${currency.rank}. ${currency.name}`}\n                                extra={<img className='crypto-image' src={currency.iconUrl} />}\n                                hoverable\n                            >\n                                <p>Price: {millify(currency.price)}</p>\n                                <p>Market Cap: {millify(currency.marketCap)}</p>\n                                <p>Daily Change: {millify(currency.change)}%</p>\n                            </Card>\n                        </Link>\n                    </Col>\n                ))}\n            </Row>\n        </>\n    )\n}\n\nexport default Cryptocurrencies\n","import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\n\nconst cryptoNewsHeaders = {\n    'x-bingapis-sdk': 'true',\n    'x-rapidapi-host': 'bing-news-search1.p.rapidapi.com',\n    'x-rapidapi-key': 'f2886fbfcamsh28008c0e5f20068p1bd8c9jsn57cb2e3b1439'\n  }\n\n  const baseUrl = 'https://bing-news-search1.p.rapidapi.com'\n\n  const createRequest = (url) => ({ url, headers: cryptoNewsHeaders })\n  \n  export const cryptoNewsApi = createApi({\n    reducerPath: 'cryptoNewsApi',\n    baseQuery: fetchBaseQuery({  baseUrl }),\n    endpoints: (builder) => ({\n        getCryptoNews: builder.query({\n            query: ({ newsCategory, count }) => createRequest(`/news/search?q=${newsCategory}&safeSearch=Off&textFormat=Raw&freshness=Day&count=${count}`),\n        })\n    })\n});\n\nexport const { useGetCryptoNewsQuery } = cryptoNewsApi;","import React, { useState } from 'react'\nimport { Typography, Select, Row, Col, Avatar, Card } from 'antd';\nimport moment from 'moment';\n\nimport { useGetCryptoNewsQuery } from '../services/cryptoNewsApi';\nimport { useGetCryptosQuery } from '../services/cryptoApi';\n\nimport Loader from './Loader';\n\nconst { Text, Title } = Typography;\nconst { Option } = Select;\n\nconst demoImage = 'https://www.bing.com/th?id=OVFT.mpzuVZnv8dwIMRfQGPbOPC&pid=News';\n\nconst News = ({ simplified }) => {\n    const [newsCategory, setNewsCategory] = useState(`Cryptocurrency`);\n    const { data: cryptoNews } = useGetCryptoNewsQuery({ newsCategory, count: simplified ? 6 : 12 })\n    const { data } = useGetCryptosQuery(100);\n\n    if (!cryptoNews?.value) return <Loader />\n    return (\n        <Row gutter={[24,24]}>\n            {!simplified && (\n                <Col span={24}>\n                    <Select\n                        showSearch\n                        className='select-news'\n                        placeholder=\"Select a Cryptocurrency\"\n                        optionFilterProp=\"children\"\n                        onChange={(value) => setNewsCategory(value)}\n                        filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n\n                    >\n                        <Option value=\"Cryptocurrency\">Cryptocurrency</Option>\n                        {data?.data?.coins.map((coin) => \n                            <Option value={coin.name}>\n                                {coin.name}\n                            </Option>\n                        )}\n                    </Select>\n                </Col>\n            )}\n            {cryptoNews.value.map((news, i) => (\n                <Col xs={24} sm={12} lg={8} key={i}>\n                    <Card hoverable className=\"news-card\">\n                        <a href={news.url} target=\"_blank\"  rel=\"noreferrer\">\n                            <div className=\"news-image-container\">\n                                <Title className=\"news-title\" level={4}>{news.name}</Title>\n                                <img style={{ maxWidth: '200px', maxHeight: '100px' }} src={news?.image?.thumbnail?.contentUrl || demoImage } alt='news'></img>\n                            </div>\n                            <p>\n                                {news.description > 100 \n                                   ? `${news.description.substring(0,100)}}...`\n                                   : news.description\n                                }\n                            </p>\n                            <div className='provider-container'>\n                                <div>\n                                    <Avatar src={news.provider[0]?.image?.thumbnail?.contentUrl || demoImage} alt='news' />\n                                    <Text className='provider-name'>{news.provider[0]?.name}</Text>\n                                </div>\n                                <Text>{moment(news.datePublished).startOf('ss').fromNow()}</Text>\n\n                            </div>\n                        </a>\n                    </Card>\n                </Col>\n            ))}\n        </Row>\n    )\n}\n\nexport default News\n","import React from 'react';\nimport HTMLReactParser from 'html-react-parser';\nimport { Table, Typography, Avatar } from 'antd';\nimport millify from 'millify';\nimport { useGetCryptoExchangesQuery } from '../services/cryptoApi';\nimport Loader from './Loader';\n\nconst { Title, Text } = Typography;\n\n\nconst Exchanges = () => {\n    const { data, isFetching } = useGetCryptoExchangesQuery();\n    const exchangesData = data?.data?.exchanges\n\n    if (isFetching) return <Loader />\n\n\n    console.log(exchangesData)\n\n    const columns = [\n        {\n            title: 'Exchanges',\n            dataIndex: ['name', 'iconUrl'],\n            render: (text, record) => <Text strong>{record.rank}.<Avatar className=\"exchange-image\" src={record.iconUrl} />{record.name}</Text>\n        },\n        { \n            title: '24h Trade Volume', \n            dataIndex: 'volume',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.volume - b.volume,\n            render: text => `$${millify(text)}` },\n        { \n            title: 'Markets', \n            dataIndex: 'numberOfMarkets',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.numberOfMarkets - b.numberOfMarkets,\n            render: markets => millify(markets)},\n        { \n            title: 'Change', \n            dataIndex: 'marketShare',\n            defaultSortOrder: 'descend',\n            sorter: (a, b) => a.marketShare - b.marketShare,\n            render: share => `${millify(share)}%`\n        }\n    ];\n\n\n    return (\n        <Table \n            rowKey='id'\n            columns={columns}\n            expandable={{\n                expandedRowRender: record => <p style={{ margin: 0 }}>{HTMLReactParser(record.description)}</p>\n              }}\n            dataSource={exchangesData} />\n    )\n}\n\nexport default Exchanges;\n","import React from 'react'\nimport { Switch, Route, Link } from 'react-router-dom';\nimport { Layout, Typography, Space } from 'antd';\n\nimport { Navbar, Exchanges, Homepage, Cryptocurrencies, Cryptodetails, News } from './components';\nimport './App.css'\n\nconst App = () => {\n    return (\n        <div className=\"app\">\n            <div className=\"navbar\">\n                <Navbar />\n            </div>\n\n            <div className=\"main\">\n                <Layout>\n                    <div className=\"routes\">\n                        <Switch>\n                            <Route exact path=\"/\">\n                                <Homepage />\n                            </Route>\n                            <Route exact path=\"/exchanges\">\n                                <Exchanges />\n                            </Route>\n                            <Route exact path=\"/cryptocurrencies\">\n                                <Cryptocurrencies />\n                            </Route>\n                            <Route exact path=\"/crypto/:coinId\">\n                                <Cryptodetails />\n                            </Route>\n                            <Route exact path=\"/news\">\n                                <News />\n                            </Route>\n                        </Switch>\n\n                    </div>\n                </Layout>\n            \n                <div className=\"footer\" level={5}>\n                    <Typography.Title style={{color: 'white', textAlign: 'center'}}>\n                        Crypto App <br />\n                        All rights reserved\n                    </Typography.Title>\n                    <Space>\n                        <Link to=\"/\">Home</Link>\n                        <Link to=\"/exchanges\">Exchanges</Link>\n                        <Link to=\"/news\">News</Link>\n\n                    </Space>\n                </div>\n            </div>\n            \n        </div>\n    )\n}\n\nexport default App\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport { cryptoApi } from \"../services/cryptoApi\";\nimport { cryptoNewsApi } from \"../services/cryptoNewsApi\";\n\n\nexport default configureStore({\n    reducer: {\n        [cryptoApi.reducerPath]: cryptoApi.reducer,\n        [cryptoNewsApi.reducerPath]: cryptoNewsApi.reducer,\n    },\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport store from './app/store';\nimport 'antd/dist/antd.css'\n\nReactDOM.render(\n    <Router>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </Router>, \n    document.getElementById('root'));\n\n"],"sourceRoot":""}